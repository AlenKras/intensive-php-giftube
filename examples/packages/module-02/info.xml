<?xml version="1.0" encoding="utf-8"?>
<examples>
    <example name="Простые массивы" index="1">
        <description>to do</description>
        <files>
            <file name="array.php" main="true" show="true">
                <intro order="1">В этой демке мы разберем все основные операции с простыми массивами. Научимся их создавать,
                заполнять, читать от туда значения проверять существование элементов.</intro>
                <states>
                    <state order="2">Массив можно создать двумя способами: объявить его пустым или сразу заполнить значениями.
                        Рассмотрим первый способ
                    </state>
                    <state order="3">Чтобы сразу заполнить массив значениями, поместите их внутри литерала массива, разделив
                        запятыми
                    </state>
                    <state order="4">Еще один не совсем обычный способ сделать массив - это сконвертировать в него строку со
                        значениями, разделенными специальным символом. Например, запятой
                    </state>
                    <state order="5">Т.к. массив содержит список значений, его нельзя вывести на экран как простую переменную
                    </state>
                    <state order="6">Чтобы узнать что содержится в массиве (для отладочных целей) можно воспользоваться функциями
                        var_dump или print_r
                    </state>
                    <state order="7">Все значения массива можно преобразовать в строку, где эти значения будут разделены
                        специальным символом. Например, запятой
                    </state>
                    <state order="8">Чтобы получить значение из массива необходимо указать его индекс. Индексация значения
                        начинается с нуля, т.е. индекс первого значения массива всегда будет равен нулю.
                    </state>
                    <state order="9">Чтобы получить последнее значение, необходимо узнать его индекс. Для этого надо узнать общее
                        кол-во элементов и отнять единицу.
                    </state>
                    <state order="10">Для добавления нового значения в конец массива используйте литерал 'пустые скобки'</state>
                    <state order="11">Вы можете обновить любой элемент в массиве указав его индекс и присвоив новое значение
                    </state>
                    <state order="12">Используйте функцию array_unshift, чтобы добавить новый элемент в начало массива</state>
                    <state order="13">Для удаления элементов из массива существует функция unset, которой надо передавать индекс
                        удаляемого элемента
                    </state>
                    <state order="14">Чтобы узнать, есть ли в массиве элемент с определенным индексом используйте функцию isset
                    </state>
                    <state order="15">Для проверки существования значения в массиве используйте функцию in_array</state>
                    <state order="16">Чтобы 'забрать' первый элемент массива существует функция array_shift. Она возвращает первый
                        элемент и одновременно удаляем его из массива
                    </state>
                    <state order="17">Функция array_merge умеет объединять два массива в один</state>
                    <state order="18">Элементы массива можно сортировать, т.е. менять их порядок. Например, можно отсортировать,
                        расположив элементы в алфавитном порядке их значений
                    </state>
                </states>
            </file>
            <file name="index.php" main="false" show="false">
                <states/>
            </file>
        </files>
    </example>
    <example name="Ассоциативные массивы" index="2">
        <description>to do</description>
        <files>
            <file name="array_assoc.php" main="true" show="true">
                <intro order="1">Рассмотрим другой вид массивов - ассоциативные. В таких массивах можно хранить значения,
                под именованным ключом.</intro>
                <states>
                    <state order="2">Добавлять новое значение в ассоциативный массив надо вместе с ключом. Если в массиве не было
                        такого ключа, то это значение добавится, а если было - заменится
                    </state>
                    <state order="3">Прочитать значение из ассоциативного массива можно также как и из простого, только вместо
                        индекса используйте ключ
                    </state>
                    <state order="4">Замена значений не отличается от добавления новых</state>
                    <state order="5">Чтобы получить последнее значение из ассоциативного массива, надо вначале получить его ключи,
                        определить последний ключ и использовать его для получения значения
                    </state>
                </states>
            </file>
            <file name="index.php" main="false" show="false">
                <states/>
            </file>
        </files>
    </example>
    <example name="Двумерные массивы" index="3">
        <description>to do</description>
        <files>
            <file name="two_array.php" main="true" show="true">
                <intro order="1">Двумерные массивы полезны для хранения списков, состоящих из сложных значений.
                Например, список юзеров, где каждый юзер имеет имя, возраст и электронную почту.</intro>
                <states>
                    <state order="2">Наш первый двумерный массив состоит из двух обычных, ассоциативных массивов</state>
                    <state order="3">Вы можете создать двумерный массив, объявив вложенные ассоциативные массивы прямо в момент
                     создания первого</state>
                    <state order="4">Двумерный массив - это простой массив, каждый элемент которого - массив ассоциативный.
                    Поэтому, чтобы получить значение любого из вложенных массивов необходимо вначале указать индекс,
                    под которым он сохранен, а затем интересующий ключ</state>
                    <state order="5">Стандартная функция array_rand вернет нам один случайный индекс из существующих в переданном
                    ей массиве</state>
                </states>
            </file>
            <file name="index.php" main="false" show="false">
                <states/>
            </file>
        </files>
    </example>
    <example name="Циклы" index="4">
        <description>to do</description>
        <files>
            <file name="loops.php" main="true" show="true">
                <intro order="1">Изучим работу циклов - структуры языка для выполнения участка кода больше одного раза.</intro>
                <states>
                    <state order="2">Перед вами самый простой цикл. Он умеет выводить все цифры от 1 до 9 включительно.
                    Цикл выполняется, пока значение в переменной $last_num будет меньше 10 - это задано в условии
                    цикла. В теле цикла мы выводим текущее значение переменной, а затем увеличиваем её на единицу</state>
                    <state order="3">Тот же цикл, что и в прошлом примере, но здесь мы выводим все цифры в HTML-списке.
                    Обратите внимание на альтернативную форму записи цикла. Она применяется при работе с HTML кодом</state>
                    <state order="4">Циклы часто используются для перебора массивов. В этом примере с помощью цикла на страницу
                    выводятся все значения из массива $categories</state>
                    <state order="5">Опять тот же пример, но на этот раз весь массив категорий выводим в виде HTML-списка</state>
                    <state order="6">foreach - это другой вид циклов. Цикл foreach создан специально для удобного перебора всех
                    ключей и значений любого массива. Здесь мы с его помощью обходим ассоциативный массив и показываем
                    на странице каждый его ключ и значение.</state>
                    <state order="7">А вот и самый комплексный пример. Здесь у нас двумерный массив, цикл foreach и работа с HTML
                    кодом. Благодаря всем этим возможностям мы можем сформировать HTML-страницу, где будет список гифок
                    </state>
                </states>
            </file>
            <file name="index.php" main="false" show="false">
                <states/>
            </file>
        </files>
    </example>
    <example name="Функции" index="5">
        <description>to do</description>
        <files>
            <file name="func.php" main="true" show="true">
                <intro order="1">В этой демонстрации создадим свою функцию для обрезания строки.</intro>
                <states>
                    <state order="2">Так выглядит объявление и последующее использование пользовательской функции. Функция
                        calculate_amount очень простая - она складывает два числа и возвращает результат их сложения.
                        Аргументы функции - это те переменные, которые мы передаем в функцию при её вызове. В данном
                        примере таких аргументов два: $first и $second.
                    </state>
                    <state order="3">Давайте напишем что нибудь более полезное. Функция cut_text() умеет обрезать строку текста
                    до определенной длины и добавлять в конец знак многоточия. У функции два аргумента: искомая строка
                    и число символов, до которой строку требуется обрезать.</state>
                </states>
            </file>
            <file name="index.php" main="false" show="false">
                <states/>
            </file>
        </files>
    </example>
</examples>
