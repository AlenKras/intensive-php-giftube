<?xml version="1.0" encoding="utf-8"?>
<examples>
    <example name="Объект для БД" index="1">
        <description>to do</description>
        <files>
            <file name="Database.php" main="true" show="true">
                <states>
                    <state>Начинаем с определения свойств. Три приватных свойства объекта будут хранить: ресурс
                        соединения, последнюю ошибку и последний результат
                    </state>
                    <state>Определяем специальный метод - конструктор. Этот метод вызывается автоматически в момент
                        создания объекта. В нем выполняется подключение к БД и сохранение полученного ресурса в свойство
                    </state>
                    <state>Определим метод для выполнения запроса к БД. Он будет принимать SQL, выполнять запрос и
                        сохранять результат или возможную ошибку во внутренних свойствах объекта
                    </state>
                    <state>Сделаем метод для получения из объекта последней ошибки. Если ошибок не было, то он вернет
                        null
                    </state>
                    <state>Этот метод нужен, чтобы возвращать результат SELECT запросов в виде двумерного массива
                    </state>
                    <state>Два вспомогательных метода: для получения последнего вставленного ID и для количества строк в
                        результате
                    </state>
                </states>
            </file>
            <file name="index.php" main="false" show="true">
                <states>
                    <state>Вначале создадим новый объект класса Database. Передадим туда массив с параметрами для
                        подключения к MySQL. Теперь у нас есть объект для работы с БД.</state>
                    <state>Вызовем метод объекта "getLastError", чтобы узнать успешность подключения к MySQL.</state>
                    <state>Выполняем запрос на показ списка категорий через метод executeQuery. Присвоим массиву
                        $categories полученный список.</state>
                    <state>Заменим вызовами соответствующих методов операции получения количества гифок и запрос на
                    список гифок для текущей страницы.</state>
                    <state reload="true">Если запросы выполнились без ошибок, то получим список гифок в массив и передадим его в
                    шаблон вместе с остальными данными пагинации.</state>
                </states>
            </file>
        </files>
    </example>
    <example name="Работа с библиотеками" index="2">
        <description>to do</description>
        <files>
            <file name="GifConverter.php" main="true" show="true">
                <states>
                    <state>Определим свойства для хранения объектов библиотеки и имени гифки</state>
                    <state>Добавим метод-конструктор, который будет заполнять свойства объектами библиотеки</state>
                    <state>Создадим главный и единственный метод, который получит из гифки первый кадр и сохранит его
                        отдельно
                    </state>
                    <state>Проверяем, что переданный путь содержит валидную гифку. Если так, то получаем из неё все
                        кадры
                    </state>
                    <state>Выполняем всю оставшуюся работу: получаем первый кадр, создаем на его основе новую гифку и
                        сохраняем её как новый файл
                    </state>
                </states>
            </file>
            <file name="add.php" main="false" show="true">
                <states>
                    <state>Не забудем подключить сценарий с классом и файл автозагрузки composer.</state>
                    <state reload="true">В процессе сохранения нужной гифки нам необходимо получить её превью. Таким превью будет
                    первый кадр из этой гифки. Создадим объект нашего класса и передадим в конструктор путь к файлу
                    гифки. Затем вызовем метод createAndSaveThumbnail, который и выполнит всю работу - получит первый
                    кадр и сохранит его как отдельный файл.</state>
                </states>
            </file>
        </files>
    </example>
</examples>
